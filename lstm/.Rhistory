signal<-rep(0,(length(price)-aw))
dif <- function(ret){
dd  = diff(ret)/ret[-length(ret)]
return(dd)
}
dif.p <- dif(price)[-1]
dif.p
for(i in aw:length(dif.p)){
if(dif.p[i]>threshold) signal[i-aw+1]=1
else if(dif.p[i]<S_threshold) signal[i-aw+1]=-1
}
x=c(X[1:aw,1],X[1:aw,2],X[1:aw,3],X[1:aw,4],X[1:aw,5])
for(i in 2:(length(price)-aw)){
temp=c(X[i:(aw+i-1),1],X[i:(aw+i-1),2],X[i:(aw+i-1),3],X[i:(aw+i-1),4],X[i:(aw+i-1),5])
x=rbind(x,temp)
}
data=data.frame(cbind(x,signal[1:(train-aw)]))
dimnames(data)[[2]][(5*aw+1)]='signal'
data$signal=as.factor(data$signal)
data$signal
colnames(data)
lp=length(signal)-train
pcl<-factor(lp,levels=c(-1,0,1))
z<-ksvm(signal~.,data[1:train,],kernal='rbfdot')
pcl[1]<-predict(z,data[(train+1),])
for(i in 2:lp){
z<-ksvm(signal~.,data[i:(train+i-1),],kernal='rbfdot')
pcl[i]<-predict(z,data[(train+i),])
}
pcl
mean(data$signal[(train+1):length(signal)]!=pcl)
fash <- rep(1000000,length(price)-aw-train+1)  #??ʼ?ʽ???��
unit <- rep(0,length(price)-aw-train+1)  #??ʼ??????��
for(i in 2:length(fash)){
if(pcl[i-1]==1) {
unit[i] <- floor(fash[i-1]/in_price[train+aw+i-1])+unit[i-1]
fash[i] <- fash[i-1]-in_price[train+aw+i-1]*(unit[i]-unit[i-1])
}
if(pcl[i-1]==0) {
unit[i] <- unit[i-1]
fash[i] <- fash[i-1]
}
if(pcl[i-1]==(-1)) fash[i] <- fash[i-1]+unit[i-1]*in_price[train+aw+i-1]
}
count <- fash+unit*(price[(aw+train):length(price)] )
revenue.rate <- (count-1000000)/1000000
par(mfrow=c(2,1))
plot(revenue.rate,type="l",ylab="r.rate",xlab="day",col=2)
plot(price[(aw+train):length(price)],type='l' )
huiche=function(x){
high=x[1]
hc=0
for(i in 2:length(x)){
if(x[i]>high) high=x[i]
if((high-x[i])/high>hc) hc=(high-x[i])/high
}
return(hc)
}
huiche(count)
library(kernlab)
aw<-20 #对于每一天得的预测只使用过去40天的数据
B_threshold=0.02
S_threshold=-0.01
train=100
stock <- read.csv("~/gitwork/shangzheng50s_data.csv",head=TRUE)
as.character(stock[,"secID"][1])
stock.1 <- stock[as.character(stock[,"secID"])=="600000.XSHG",]
plot.ts(stock.1[,"closePrice"])
price <- stock.1[,"closePrice"]
in_price<-stock.1[,'openPrice']
X<-data.frame(stock.1[,9:13])
signal<-rep(0,(length(price)-aw))
dif <- function(ret){
dd  = diff(ret)/ret[-length(ret)]
return(dd)
}
dif.p <- dif(price)[-1]
dif.p
for(i in aw:length(dif.p)){
if(dif.p[i]>threshold) signal[i-aw+1]=1
else if(dif.p[i]<S_threshold) signal[i-aw+1]=-1
}
x=c(X[1:aw,1],X[1:aw,2],X[1:aw,3],X[1:aw,4],X[1:aw,5])
for(i in 2:(length(price)-aw)){
temp=c(X[i:(aw+i-1),1],X[i:(aw+i-1),2],X[i:(aw+i-1),3],X[i:(aw+i-1),4],X[i:(aw+i-1),5])
x=rbind(x,temp)
}
data=data.frame(cbind(x,signal[1:(train-aw)]))
dimnames(data)[[2]][(5*aw+1)]='signal'
data$signal=as.factor(data$signal)
data$signal
colnames(data)
lp=length(signal)-train
pcl<-factor(lp,levels=c(-1,0,1))
z<-ksvm(signal~.,data[1:train,],kernal='rbfdot')
pcl[1]<-predict(z,data[(train+1),])
for(i in 2:lp){
z<-ksvm(signal~.,data[i:(train+i-1),],kernal='rbfdot')
pcl[i]<-predict(z,data[(train+i),])
}
pcl
mean(data$signal[(train+1):length(signal)]!=pcl)
fash <- rep(1000000,length(price)-aw-train+1)  #??ʼ?ʽ???��
unit <- rep(0,length(price)-aw-train+1)  #??ʼ??????��
for(i in 2:length(fash)){
if(pcl[i-1]==1) {
unit[i] <- floor(fash[i-1]/in_price[train+aw+i-1])+unit[i-1]
fash[i] <- fash[i-1]-in_price[train+aw+i-1]*(unit[i]-unit[i-1])
}
if(pcl[i-1]==0) {
unit[i] <- unit[i-1]
fash[i] <- fash[i-1]
}
if(pcl[i-1]==(-1)) fash[i] <- fash[i-1]+unit[i-1]*in_price[train+aw+i-1]
}
count <- fash+unit*(price[(aw+train):length(price)] )
revenue.rate <- (count-1000000)/1000000
par(mfrow=c(2,1))
plot(revenue.rate,type="l",ylab="r.rate",xlab="day",col=2)
plot(price[(aw+train):length(price)],type='l' )
huiche=function(x){
high=x[1]
hc=0
for(i in 2:length(x)){
if(x[i]>high) high=x[i]
if((high-x[i])/high>hc) hc=(high-x[i])/high
}
return(hc)
}
huiche(count)
library(kernlab)
aw<-20 #对于每一天得的预测只使用过去40天的数据
B_threshold=0.02
S_threshold=-0.01
train=100
stock <- read.csv("~/gitwork/shangzheng50s_data.csv",head=TRUE)
as.character(stock[,"secID"][1])
stock.1 <- stock[as.character(stock[,"secID"])=="600000.XSHG",]
plot.ts(stock.1[,"closePrice"])
price <- stock.1[,"closePrice"]
in_price<-stock.1[,'openPrice']
X<-data.frame(stock.1[,9:13])
signal<-rep(0,(length(price)-aw))
dif <- function(ret){
dd  = diff(ret)/ret[-length(ret)]
return(dd)
}
dif.p <- dif(price)[-1]
dif.p
for(i in aw:length(dif.p)){
if(dif.p[i]>B_threshold) signal[i-aw+1]=1
else if(dif.p[i]<S_threshold) signal[i-aw+1]=-1
}
x=c(X[1:aw,1],X[1:aw,2],X[1:aw,3],X[1:aw,4],X[1:aw,5])
for(i in 2:(length(price)-aw)){
temp=c(X[i:(aw+i-1),1],X[i:(aw+i-1),2],X[i:(aw+i-1),3],X[i:(aw+i-1),4],X[i:(aw+i-1),5])
x=rbind(x,temp)
}
data=data.frame(cbind(x,signal[1:(train-aw)]))
dimnames(data)[[2]][(5*aw+1)]='signal'
data$signal=as.factor(data$signal)
data$signal
colnames(data)
lp=length(signal)-train
pcl<-factor(lp,levels=c(-1,0,1))
z<-ksvm(signal~.,data[1:train,],kernal='rbfdot')
pcl[1]<-predict(z,data[(train+1),])
for(i in 2:lp){
z<-ksvm(signal~.,data[i:(train+i-1),],kernal='rbfdot')
pcl[i]<-predict(z,data[(train+i),])
}
pcl
mean(data$signal[(train+1):length(signal)]!=pcl)
fash <- rep(1000000,length(price)-aw-train+1)  #??ʼ?ʽ???��
unit <- rep(0,length(price)-aw-train+1)  #??ʼ??????��
for(i in 2:length(fash)){
if(pcl[i-1]==1) {
unit[i] <- floor(fash[i-1]/in_price[train+aw+i-1])+unit[i-1]
fash[i] <- fash[i-1]-in_price[train+aw+i-1]*(unit[i]-unit[i-1])
}
if(pcl[i-1]==0) {
unit[i] <- unit[i-1]
fash[i] <- fash[i-1]
}
if(pcl[i-1]==(-1)) fash[i] <- fash[i-1]+unit[i-1]*in_price[train+aw+i-1]
}
count <- fash+unit*(price[(aw+train):length(price)] )
revenue.rate <- (count-1000000)/1000000
par(mfrow=c(2,1))
plot(revenue.rate,type="l",ylab="r.rate",xlab="day",col=2)
plot(price[(aw+train):length(price)],type='l' )
huiche=function(x){
high=x[1]
hc=0
for(i in 2:length(x)){
if(x[i]>high) high=x[i]
if((high-x[i])/high>hc) hc=(high-x[i])/high
}
return(hc)
}
huiche(count)
library(kernlab)
aw<-20 #对于每一天得的预测只使用过去40天的数据
B_threshold=0.01
S_threshold=-0.01
train=100
stock <- read.csv("~/gitwork/shangzheng50s_data.csv",head=TRUE)
as.character(stock[,"secID"][1])
stock.1 <- stock[as.character(stock[,"secID"])=="600000.XSHG",]
plot.ts(stock.1[,"closePrice"])
price <- stock.1[,"closePrice"]
in_price<-stock.1[,'openPrice']
X<-data.frame(stock.1[,9:13])
signal<-rep(0,(length(price)-aw))
dif <- function(ret){
dd  = diff(ret)/ret[-length(ret)]
return(dd)
}
dif.p <- dif(price)[-1]
dif.p
for(i in aw:length(dif.p)){
if(dif.p[i]>B_threshold) signal[i-aw+1]=1
else if(dif.p[i]<S_threshold) signal[i-aw+1]=-1
}
x=c(X[1:aw,1],X[1:aw,2],X[1:aw,3],X[1:aw,4],X[1:aw,5])
for(i in 2:(length(price)-aw)){
temp=c(X[i:(aw+i-1),1],X[i:(aw+i-1),2],X[i:(aw+i-1),3],X[i:(aw+i-1),4],X[i:(aw+i-1),5])
x=rbind(x,temp)
}
data=data.frame(cbind(x,signal[1:(train-aw)]))
dimnames(data)[[2]][(5*aw+1)]='signal'
data$signal=as.factor(data$signal)
data$signal
colnames(data)
lp=length(signal)-train
pcl<-factor(lp,levels=c(-1,0,1))
z<-ksvm(signal~.,data[1:train,],kernal='rbfdot')
pcl[1]<-predict(z,data[(train+1),])
for(i in 2:lp){
z<-ksvm(signal~.,data[i:(train+i-1),],kernal='rbfdot')
pcl[i]<-predict(z,data[(train+i),])
}
pcl
mean(data$signal[(train+1):length(signal)]!=pcl)
fash <- rep(1000000,length(price)-aw-train+1)  #??ʼ?ʽ???��
unit <- rep(0,length(price)-aw-train+1)  #??ʼ??????��
for(i in 2:length(fash)){
if(pcl[i-1]==1) {
unit[i] <- floor(fash[i-1]/in_price[train+aw+i-1])+unit[i-1]
fash[i] <- fash[i-1]-in_price[train+aw+i-1]*(unit[i]-unit[i-1])
}
if(pcl[i-1]==0) {
unit[i] <- unit[i-1]
fash[i] <- fash[i-1]
}
if(pcl[i-1]==(-1)) fash[i] <- fash[i-1]+unit[i-1]*in_price[train+aw+i-1]
}
count <- fash+unit*(price[(aw+train):length(price)] )
revenue.rate <- (count-1000000)/1000000
par(mfrow=c(2,1))
plot(revenue.rate,type="l",ylab="r.rate",xlab="day",col=2)
plot(price[(aw+train):length(price)],type='l' )
huiche=function(x){
high=x[1]
hc=0
for(i in 2:length(x)){
if(x[i]>high) high=x[i]
if((high-x[i])/high>hc) hc=(high-x[i])/high
}
return(hc)
}
huiche(count)
library(kernlab)
aw<-40 #对于每一天得的预测只使用过去40天的数据
B_threshold=0.01
S_threshold=-0.01
train=100
stock <- read.csv("~/gitwork/shangzheng50s_data.csv",head=TRUE)
as.character(stock[,"secID"][1])
stock.1 <- stock[as.character(stock[,"secID"])=="600000.XSHG",]
plot.ts(stock.1[,"closePrice"])
price <- stock.1[,"closePrice"]
in_price<-stock.1[,'openPrice']
X<-data.frame(stock.1[,9:13])
signal<-rep(0,(length(price)-aw))
dif <- function(ret){
dd  = diff(ret)/ret[-length(ret)]
return(dd)
}
dif.p <- dif(price)[-1]
dif.p
for(i in aw:length(dif.p)){
if(dif.p[i]>B_threshold) signal[i-aw+1]=1
else if(dif.p[i]<S_threshold) signal[i-aw+1]=-1
}
x=c(X[1:aw,1],X[1:aw,2],X[1:aw,3],X[1:aw,4],X[1:aw,5])
for(i in 2:(length(price)-aw)){
temp=c(X[i:(aw+i-1),1],X[i:(aw+i-1),2],X[i:(aw+i-1),3],X[i:(aw+i-1),4],X[i:(aw+i-1),5])
x=rbind(x,temp)
}
data=data.frame(cbind(x,signal[1:(train-aw)]))
dimnames(data)[[2]][(5*aw+1)]='signal'
data$signal=as.factor(data$signal)
data$signal
colnames(data)
lp=length(signal)-train
pcl<-factor(lp,levels=c(-1,0,1))
z<-ksvm(signal~.,data[1:train,],kernal='rbfdot')
pcl[1]<-predict(z,data[(train+1),])
for(i in 2:lp){
z<-ksvm(signal~.,data[i:(train+i-1),],kernal='rbfdot')
pcl[i]<-predict(z,data[(train+i),])
}
pcl
mean(data$signal[(train+1):length(signal)]!=pcl)
fash <- rep(1000000,length(price)-aw-train+1)  #??ʼ?ʽ???��
unit <- rep(0,length(price)-aw-train+1)  #??ʼ??????��
for(i in 2:length(fash)){
if(pcl[i-1]==1) {
unit[i] <- floor(fash[i-1]/in_price[train+aw+i-1])+unit[i-1]
fash[i] <- fash[i-1]-in_price[train+aw+i-1]*(unit[i]-unit[i-1])
}
if(pcl[i-1]==0) {
unit[i] <- unit[i-1]
fash[i] <- fash[i-1]
}
if(pcl[i-1]==(-1)) fash[i] <- fash[i-1]+unit[i-1]*in_price[train+aw+i-1]
}
count <- fash+unit*(price[(aw+train):length(price)] )
revenue.rate <- (count-1000000)/1000000
par(mfrow=c(2,1))
plot(revenue.rate,type="l",ylab="r.rate",xlab="day",col=2)
plot(price[(aw+train):length(price)],type='l' )
huiche=function(x){
high=x[1]
hc=0
for(i in 2:length(x)){
if(x[i]>high) high=x[i]
if((high-x[i])/high>hc) hc=(high-x[i])/high
}
return(hc)
}
huiche(count)
x(1:2)
jc=function(n){
a=1
for(i in 1:n) a=a*i
return(a)
}
x=function(n){
return(1/(2n+1)*jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1))
}
x(1:2)
x=function(n) return(1/(2n+1)*jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1))
x=function(n){
a=1/(2n+1)*jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
return(a)
}
jc=function(n){
a=1
for(i in 1:n) a=a*i
return(a)
}
x=function(n){
a=1/(2n+1)*jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
x=function(n){
a=jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
ele=function(n){
a=jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
return(a)
}
2^6
x(n)=function(n){
jc(n)
}
x=function(n){
jc(n)
}
n=1
a=jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
a=jc(n)
a=jc(2n+1)
jc=function(m){
a=1
for(i in 1:m) a=a*i
return(a)
}
n=1
a=jc(2n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
a=jc(2n+1)
a=jc((2n+1))
c=2n+1
jc=function(m){
a=1
for(i in 1:m) a=a*i
return(a)
}
ele=function(n){
a=jc(2*n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
return(a/(2*n+1))
}
n=1
a=jc(2*n+1)/jc(n+1)/jc(n)*(1/2)^(2n+1)
ele=function(n){
a=jc(2*n+1)/jc(n+1)/jc(n)*(1/2)^(2*n+1)
return(a/(2*n+1))
}
x(1:2)
x=Vectorize(ele)
x(1:2)
sum(x(1:100))
ele(0)
jc=function(m){
a=1
if(m==0) return(1)
for(i in 1:m) a=a*i
return(a)
}
ele=function(n){
a=jc(2*n+1)/jc(n+1)/jc(n)*(1/2)^(2*n+1)
return(a/(2*n+1))
}
ele(0)
x(1:10)
sum(x(1:10))
sum(x(1:100))
sum(x(1:50))
sum(x(50:100))
for(i in 1:100) print(sum(x(1:i)))
for(i in 1:100) print(i,sum(x(1:i)))
for(i in 1:100) print(sum(x(1:i)))
jc(100)
jc(200)
for(i in 1:100) print(i);print(sum(x(1:i)))
for(i in 1:100) {
print(i)
print(sum(x(1:i)))
}
jc(170)
jc(171)
choose(10,2)
a=choose(2*n+1,n+1)*(1/2)^(2*n+1)
ele=function(n){
a=choose(2*n+1,n+1)*(1/2)^(2*n+1)
return(a/(2*n+1))
}
x=Vectorize(ele)
for(i in 1:100) {
print(i)
print(sum(x(1:i)))
}
sum(x(i:1000))
sum(x(1:1000))
sum(x(0:200))
cl <- makeSOCKcluster(c("localhost","localhost"))
clusterApply(cl, 1:2, get("+"), 3)
library(snow)
cl <- makeSOCKcluster(c("localhost","localhost"))
clusterApply(cl, 1:2, get("+"), 3)
licence()
library(MASS)
library(kernlab)
install.packages(jpeg)
install.packages('jpeg')
install.packages('xlsx')
library(xlsx)
library(kernlab)
install.packages(kernlab)
install.packages('kernlab')
install.packages('snow')
install.packages('ggplot2')
install.packages('rgl')
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:tools", unload=TRUE)
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages('zoo')
factorial(12)
factorial(12)*factorial(11)/factorial(5)/factorial(18)
for(k in 1:6){
n=7
sum=0
for(k in 1:6){
sum=sum+choose(n,k)*(-1)^(k+1)*(7-k)^12
}
sum/7^12
1-ans
1-sum/7^12
_
1/1643
0.91317*1643
0.91218*1643
setwd('~/python/Theanolearn/facecnn/lstm')
X=read.csv('strat.csv')
plot(X$sp)
plot(X$sp,type='l')
plot(X$sp,type='l',xlab='days')
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.1,0.05))
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.12,0.05))
lines(X$str,col=2,lty=2)
setwd('~/python/Theanolearn/facecnn/lstm')
X=read.csv('strat.csv')
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.12,0.05))
lines(X$str,col=2,lty=2)
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.14,0))
lines(X$str,col=2,lty=2)
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.14,0.02))
lines(X$str,col=2,lty=2)
legend(c(0,-0.7),c('s$p index','strategy'),col=c(1,2),lty=c(1,2))
plot(X$sp,type='l',xlab='days',ylab='revenue rate',ylim=c(-0.14,0.02))
lines(X$str,col=2,lty=2)
legend(0,-0.7,c('s$p index','strategy'),col=c(1,2),lty=c(1,2))
legend(10,-0.07,c('s$p index','strategy'),col=c(1,2),lty=c(1,2))
